plugins {
    id 'com.gradle.build-scan' version '1.16'
    id 'base'
    id 'nebula.lint' version '10.3.2'
    //id 'jacoco'
}

/*lintOptions {
    checkAllWarnings true
    warningsAsErrors true
    abortOnError true
}*/

def isWindows() {
    return System.properties['os.name'].toLowerCase(Locale.ROOT).contains('windows')
}

def is64BitArch() {
    return System.properties['os.arch'].contains('64')
}

def getBuildScriptName() {
    return 'ls'
}

task configure() {
    buildDir = "${projectDir}/output"
    println 'OS: '+System.properties['os.name']
    println '64 bit: '+is64BitArch()
}

task cleanAll(type: Delete) {
    delete buildDir, "${projectDir}/cache"
    shouldRunAfter clean
}

task OtaTest(type: Test) {
    outputs.doNotCacheIf('Never cached') { true }
    description = 'Runs Ota tests.'
    group = 'verification'

    doLast {
        println 'Test...'
        exec {
            executable 'zip'
        }
    }
}
//check.dependsOn integrationTest

// https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskOutputs.html
// outputs.upToDateWhen { false }

task OtaTest2() {
  // Dummy
}

task buildOta() {
    doLast {
        println 'Building the flashable OTA zip with Gradle...'
        exec {
            executable 'ls'
        }
    }
}
//build.finalizedBy buildOta

task buildOtaOss() {
    doLast {
        println 'Building the flashable OTA OSS zip with Gradle...'
        exec {
            executable 'ls'
        }
    }
}

task install(dependsOn: build) {
  // Dummy
}

task test() {
  dependsOn OtaTest, OtaTest2
}

/*
jacocoTestReport{
    //additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    executionData fileTree(project.rootDir.absolutePath).include("** /build/jacoco/*.exec")
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
    executionData = files('build/jacoco/*.exec')
}
*/

/*
task test_me(dependsOn: ':build') {
    //finalizedBy codeCoverageReport
}
*/

tasks.withType(Test) { 
  testLogging {
    exceptionFormat "full"
    events "started", "skipped", "passed", "failed"
    showStandardStreams true
  }
}

wrapper {
    gradleVersion = '4.10.2'
    distributionType = Wrapper.DistributionType.ALL
    distributionSha256Sum = 'b7aedd369a26b177147bcb715f8b1fc4fe32b0a6ade0d7fd8ee5ed0c6f731f2c'
}
